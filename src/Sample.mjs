// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_format from "rescript/lib/es6/caml_format.js";
import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";

function isDigit(c) {
  if (c >= "0") {
    return c <= "9";
  } else {
    return false;
  }
}

function isWhitespace(c) {
  return c.trim().length === 0;
}

function identifyToken(tokenString) {
  switch (tokenString) {
    case "*" :
        return "TIMES";
    case "+" :
        return "PLUS";
    case "-" :
        return "MINUS";
    case "/" :
        return "DIVIDE";
    case "=" :
        return "ASSIGN";
    case "==" :
        return "EQUALS";
    default:
      var isNumber = isDigit(tokenString);
      if (isNumber) {
        return {
                TAG: "NUMBER",
                _0: Caml_format.int_of_string(tokenString)
              };
      } else {
        return PervasivesU.failwith("Invalid token");
      }
  }
}

function isTokenCharacter(ch) {
  if (ch === undefined) {
    return false;
  }
  var match = ch.charAt(0);
  switch (match) {
    case "*" :
    case "+" :
    case "-" :
    case "/" :
    case "=" :
        return true;
    default:
      return isDigit(ch);
  }
}

function tokenize(input) {
  var currentIndex = 0;
  var tokens = [];
  while(currentIndex < input.length) {
    while(isWhitespace(Core__Option.getOr(input[currentIndex], "Not whitespace"))) {
      currentIndex = currentIndex + 1 | 0;
    };
    var tokenStart = currentIndex;
    var tokenEnd = currentIndex;
    tokenEnd = tokenEnd + 1 | 0;
    while(tokenEnd < input.length && isTokenCharacter(input[tokenEnd])) {
      tokenEnd = tokenEnd + 1 | 0;
    };
    var tokenString = input.substring(tokenStart, tokenEnd).trim();
    console.log(tokenStart, tokenEnd, tokenString);
    tokens = tokens.concat([identifyToken(tokenString)]);
    currentIndex = tokenEnd;
  };
  return tokens;
}

function parse(input) {
  return tokenize(input);
}

var program = "5 + 3 == 8";

console.log(program);

console.log(tokenize(program));

export {
  isDigit ,
  isWhitespace ,
  identifyToken ,
  isTokenCharacter ,
  tokenize ,
  parse ,
  program ,
}
/*  Not a pure module */
