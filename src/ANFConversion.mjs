// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Core__List from "@rescript/core/src/Core__List.mjs";

var counter = {
  contents: 0
};

function freshVar() {
  counter.contents = counter.contents + 1 | 0;
  return "x" + counter.contents.toString();
}

function exprToAtom(expr) {
  switch (expr.TAG) {
    case "Int" :
        return [
                {
                  TAG: "AInt",
                  _0: expr._0
                },
                /* [] */0
              ];
    case "Var" :
        return [
                {
                  TAG: "AVar",
                  _0: expr._0
                },
                /* [] */0
              ];
    default:
      var x = freshVar();
      var match = exprToComp(expr);
      return [
              {
                TAG: "AVar",
                _0: x
              },
              Belt_List.concatMany([
                    match[1],
                    {
                      hd: [
                        x,
                        match[0]
                      ],
                      tl: /* [] */0
                    }
                  ])
            ];
  }
}

function exprToComp(expr) {
  switch (expr.TAG) {
    case "Int" :
    case "Var" :
        break;
    case "Lam" :
        var match = exprToANF(expr._1);
        return [
                {
                  TAG: "ACLam",
                  _0: expr._0,
                  _1: match[0]
                },
                /* [] */0
              ];
    case "App" :
        var match$1 = exprToAtom(expr._0);
        var match$2 = exprToAtom(expr._1);
        return [
                {
                  TAG: "ACApp",
                  _0: match$1[0],
                  _1: match$2[0]
                },
                Belt_List.concatMany([
                      match$1[1],
                      match$2[1]
                    ])
              ];
    case "Let" :
        var match$3 = exprToComp(expr._1);
        var match$4 = exprToANF(expr._2);
        var letExpr_0 = expr._0;
        var letExpr_1 = match$3[0];
        var letExpr_2 = match$4[0];
        var letExpr = {
          TAG: "ALet",
          _0: letExpr_0,
          _1: letExpr_1,
          _2: letExpr_2
        };
        return [
                {
                  TAG: "ACLam",
                  _0: "_",
                  _1: letExpr
                },
                match$3[1]
              ];
    case "Bop" :
        var match$5 = exprToAtom(expr._1);
        var match$6 = exprToAtom(expr._2);
        return [
                {
                  TAG: "ACBop",
                  _0: expr._0,
                  _1: match$5[0],
                  _2: match$6[0]
                },
                Belt_List.concatMany([
                      match$5[1],
                      match$6[1]
                    ])
              ];
    case "If" :
        var match$7 = exprToAtom(expr._0);
        var match$8 = exprToANF(expr._1);
        var match$9 = exprToANF(expr._2);
        var x = freshVar();
        return [
                {
                  TAG: "ACLam",
                  _0: x,
                  _1: {
                    TAG: "AIf",
                    _0: match$7[0],
                    _1: match$8[0],
                    _2: match$9[0]
                  }
                },
                match$7[1]
              ];
    
  }
  var match$10 = exprToAtom(expr);
  var bindings = match$10[1];
  var a = match$10[0];
  if (a.TAG === "AInt" || Core__List.length(bindings) !== 0) {
    return [
            {
              TAG: "ACLam",
              _0: "_",
              _1: {
                TAG: "AAtom",
                _0: a
              }
            },
            bindings
          ];
  } else {
    return [
            {
              TAG: "ACApp",
              _0: a,
              _1: {
                TAG: "AInt",
                _0: 0
              }
            },
            /* [] */0
          ];
  }
}

function exprToANF(expr) {
  switch (expr.TAG) {
    case "Int" :
        return [
                {
                  TAG: "AAtom",
                  _0: {
                    TAG: "AInt",
                    _0: expr._0
                  }
                },
                /* [] */0
              ];
    case "Var" :
        return [
                {
                  TAG: "AAtom",
                  _0: {
                    TAG: "AVar",
                    _0: expr._0
                  }
                },
                /* [] */0
              ];
    case "Let" :
        var match = exprToComp(expr._1);
        var match$1 = exprToANF(expr._2);
        return [
                makeBindings(match[1], {
                      TAG: "ALet",
                      _0: expr._0,
                      _1: match[0],
                      _2: match$1[0]
                    }),
                /* [] */0
              ];
    case "If" :
        var match$2 = exprToAtom(expr._0);
        var match$3 = exprToANF(expr._1);
        var match$4 = exprToANF(expr._2);
        return [
                makeBindings(match$2[1], {
                      TAG: "AIf",
                      _0: match$2[0],
                      _1: match$3[0],
                      _2: match$4[0]
                    }),
                /* [] */0
              ];
    default:
      var match$5 = exprToAtom(expr);
      return [
              makeBindings(match$5[1], {
                    TAG: "AAtom",
                    _0: match$5[0]
                  }),
              /* [] */0
            ];
  }
}

function makeBindings(bindings, body) {
  return Core__List.reduce(bindings, body, (function (acc, param) {
                return {
                        TAG: "ALet",
                        _0: param[0],
                        _1: param[1],
                        _2: acc
                      };
              }));
}

function toANF(expr) {
  return exprToANF(expr)[0];
}

function atomToString(atom) {
  if (atom.TAG === "AInt") {
    return atom._0.toString();
  } else {
    return atom._0;
  }
}

function bopToString(op) {
  switch (op) {
    case "Plus" :
        return "+";
    case "Minus" :
        return "-";
    case "Times" :
        return "*";
    case "Div" :
        return "/";
    
  }
}

function anfCompToString(comp) {
  switch (comp.TAG) {
    case "ACApp" :
        return atomToString(comp._0) + " " + atomToString(comp._1);
    case "ACBop" :
        return atomToString(comp._1) + " " + bopToString(comp._0) + " " + atomToString(comp._2);
    case "ACLam" :
        return "λ" + comp._0 + ". " + anfExprToString(comp._1);
    
  }
}

function anfExprToString(expr) {
  switch (expr.TAG) {
    case "AAtom" :
        return atomToString(expr._0);
    case "ALet" :
        return "let " + expr._0 + " = " + anfCompToString(expr._1) + " in " + anfExprToString(expr._2);
    case "AIf" :
        return "if " + atomToString(expr._0) + " then " + anfExprToString(expr._1) + " else " + anfExprToString(expr._2);
    
  }
}

function exprToString(expr) {
  switch (expr.TAG) {
    case "Int" :
        return expr._0.toString();
    case "Var" :
        return expr._0;
    case "Lam" :
        return "λ" + expr._0 + ". " + exprToString(expr._1);
    case "App" :
        return "(" + exprToString(expr._0) + ") (" + exprToString(expr._1) + ")";
    case "Let" :
        return "let " + expr._0 + " = " + exprToString(expr._1) + " in " + exprToString(expr._2);
    case "Bop" :
        return "(" + exprToString(expr._1) + " " + bopToString(expr._0) + " " + exprToString(expr._2) + ")";
    case "If" :
        return "if " + exprToString(expr._0) + " then " + exprToString(expr._1) + " else " + exprToString(expr._2);
    
  }
}

var example1 = {
  TAG: "App",
  _0: {
    TAG: "Lam",
    _0: "x",
    _1: {
      TAG: "Bop",
      _0: "Plus",
      _1: {
        TAG: "Var",
        _0: "x"
      },
      _2: {
        TAG: "Int",
        _0: 1
      }
    }
  },
  _1: {
    TAG: "Int",
    _0: 42
  }
};

var example2 = {
  TAG: "Let",
  _0: "x",
  _1: {
    TAG: "Int",
    _0: 10
  },
  _2: {
    TAG: "Bop",
    _0: "Plus",
    _1: {
      TAG: "Var",
      _0: "x"
    },
    _2: {
      TAG: "Int",
      _0: 5
    }
  }
};

var example3 = {
  TAG: "If",
  _0: {
    TAG: "Bop",
    _0: "Plus",
    _1: {
      TAG: "Int",
      _0: 1
    },
    _2: {
      TAG: "Int",
      _0: 2
    }
  },
  _1: {
    TAG: "Int",
    _0: 3
  },
  _2: {
    TAG: "Int",
    _0: 4
  }
};

var example4 = {
  TAG: "App",
  _0: {
    TAG: "App",
    _0: {
      TAG: "Lam",
      _0: "x",
      _1: {
        TAG: "Lam",
        _0: "y",
        _1: {
          TAG: "Bop",
          _0: "Plus",
          _1: {
            TAG: "Var",
            _0: "x"
          },
          _2: {
            TAG: "Var",
            _0: "y"
          }
        }
      }
    },
    _1: {
      TAG: "Int",
      _0: 1
    }
  },
  _1: {
    TAG: "Int",
    _0: 2
  }
};

console.log("Example 1:");

console.log("Source: ", exprToString(example1));

console.log("ANF: ", anfExprToString(toANF(example1)));

console.log("");

console.log("Example 2:");

console.log("Source: ", exprToString(example2));

console.log("ANF: ", anfExprToString(toANF(example2)));

console.log("");

console.log("Example 3:");

console.log("Source: ", exprToString(example3));

console.log("ANF: ", anfExprToString(toANF(example3)));

console.log("");

console.log("Example 4:");

console.log("Source: ", exprToString(example4));

console.log("ANF: ", anfExprToString(toANF(example4)));

export {
  freshVar ,
  exprToAtom ,
  exprToComp ,
  exprToANF ,
  makeBindings ,
  toANF ,
  atomToString ,
  bopToString ,
  anfCompToString ,
  anfExprToString ,
  exprToString ,
  example1 ,
  example2 ,
  example3 ,
  example4 ,
}
/*  Not a pure module */
