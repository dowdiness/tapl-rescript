// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__List from "@rescript/core/src/Core__List.mjs";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var Syntax_Error = /* @__PURE__ */Caml_exceptions.create("Parse.Syntax_Error");

function make(str) {
  return {
          location: {
            contents: 0
          },
          source: str
        };
}

function next(stream) {
  var $$location = stream.location.contents;
  var source = stream.source;
  stream.location.contents = $$location + 1 | 0;
  return source[$$location];
}

function isWhitespace(str) {
  switch (str) {
    case " " :
    case "\n" :
    case "\r" :
    case "\t" :
        return true;
    default:
      return false;
  }
}

var Stream = {
  make: make,
  next: next,
  isWhitespace: isWhitespace
};

function stringOfToken(token) {
  if (typeof token === "object") {
    return token._0;
  }
  switch (token) {
    case "LeftParen" :
        return "(";
    case "RightParen" :
        return ")";
    case "Lambda" :
        return "位";
    case "End" :
        return "End";
    
  }
}

function toCharCode(c) {
  return c.charCodeAt(0);
}

function isAlphabet(c) {
  if (c >= "a" && c <= "z") {
    return true;
  } else if (c >= "A") {
    return c <= "Z";
  } else {
    return false;
  }
}

function lexer(source) {
  var stream_location = {
    contents: 0
  };
  var stream = {
    location: stream_location,
    source: source
  };
  var lex = function (_acc) {
    while(true) {
      var acc = _acc;
      var c = next(stream);
      if (c === undefined) {
        return acc;
      }
      switch (c) {
        case "(" :
            _acc = {
              hd: "LeftParen",
              tl: acc
            };
            continue ;
        case ")" :
            _acc = {
              hd: "RightParen",
              tl: acc
            };
            continue ;
        case "位" :
            _acc = {
              hd: "Lambda",
              tl: acc
            };
            continue ;
        default:
          if (isAlphabet(c)) {
            _acc = {
              hd: {
                TAG: "Identifier",
                _0: c
              },
              tl: acc
            };
            continue ;
          }
          continue ;
      }
    };
  };
  return Core__List.reverse(lex(/* [] */0));
}

var source = "((位 x. x) (位 y. y))";

export {
  Syntax_Error ,
  Stream ,
  stringOfToken ,
  toCharCode ,
  isAlphabet ,
  source ,
  lexer ,
}
/* No side effect */
