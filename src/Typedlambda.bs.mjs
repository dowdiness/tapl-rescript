// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__List from "@rescript/core/src/Core__List.bs.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.mjs";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

function addBinding(ctx, name, bind) {
  return Core__List.add(ctx, [
              name,
              bind
            ]);
}

function getBinding(ctx, n) {
  var match = Core__List.get(ctx, n);
  if (match !== undefined) {
    return match[1];
  }
  
}

function getTypeFromContext(ctx, i) {
  var match = getBinding(ctx, i);
  if (match !== undefined && typeof match === "object") {
    return match._0;
  }
  
}

function typeOf(ctx, t) {
  if (typeof t !== "object") {
    return "TyBool";
  }
  switch (t.TAG) {
    case "Var" :
        return getTypeFromContext(ctx, t._0);
    case "Abs" :
        var tyT1 = t._1;
        var ctx$p = addBinding(ctx, t._0, {
              TAG: "VarBind",
              _0: tyT1
            });
        var tyT2 = typeOf(ctx$p, t._2);
        if (tyT2 !== undefined) {
          return {
                  TAG: "TyArr",
                  _0: tyT1,
                  _1: tyT2
                };
        } else {
          return ;
        }
    case "App" :
        var match = typeOf(ctx, t._0);
        var match$1 = typeOf(ctx, t._1);
        if (match !== undefined && !(typeof match !== "object" || !(match.TAG === "TyArr" && match$1 !== undefined && Caml_obj.equal(match$1, match._0)))) {
          return match._1;
        } else {
          return ;
        }
    case "If" :
        var match$2 = typeOf(ctx, t._0);
        var match$3 = typeOf(ctx, t._1);
        var match$4 = typeOf(ctx, t._2);
        if (match$2 !== undefined && typeof match$2 !== "object" && match$3 !== undefined && match$4 !== undefined && Caml_obj.equal(match$3, match$4)) {
          return match$3;
        } else {
          return ;
        }
    
  }
}

function pickFreshName(ctx, _name) {
  while(true) {
    var name = _name;
    var match = Core__List.getBy(ctx, (function(name){
        return function (param) {
          return name === param[0];
        }
        }(name)));
    if (match === undefined) {
      return [
              Core__List.add(ctx, [
                    name,
                    "NameBind"
                  ]),
              name
            ];
    }
    _name = match[0] + "'";
    continue ;
  };
}

function indexToName(ctx, x) {
  var match = Core__List.get(ctx, x);
  if (match !== undefined) {
    return match[0];
  } else {
    return "[" + String(x) + " bad index]";
  }
}

function printTY(ty) {
  if (typeof ty !== "object") {
    return "Bool";
  } else if (ty.TAG === "TyArr") {
    return "(" + printTY(ty._0) + " -> " + printTY(ty._1) + ")";
  } else {
    return ty._0;
  }
}

function printTerm(ctx, t) {
  if (typeof t !== "object") {
    if (t === "True") {
      return "true";
    } else {
      return "false";
    }
  }
  switch (t.TAG) {
    case "Var" :
        var n = t._1;
        if (Core__List.length(ctx) === n) {
          return indexToName(ctx, t._0);
        } else {
          return "[" + String(Core__List.length(ctx)) + " " + String(n) + " bad index]";
        }
    case "Abs" :
        var match = pickFreshName(ctx, t._0);
        return "(λ" + match[1] + ":" + printTY(t._1) + ". " + printTerm(match[0], t._2) + ")";
    case "App" :
        return printTerm(ctx, t._0) + " " + printTerm(ctx, t._1);
    case "If" :
        return "if " + printTerm(ctx, t._0) + " then " + printTerm(ctx, t._1) + " else " + printTerm(ctx, t._2);
    
  }
}

function printContext(ctx) {
  if (Core__List.length(ctx) === 0) {
    return "∅";
  } else {
    return Core__List.reduce(ctx, "{", (function (_acc, pair) {
                    var acc = _acc;
                    if (_acc !== "{") {
                      acc = _acc + ", ";
                    }
                    var ty = pair[1];
                    var name = pair[0];
                    if (typeof ty !== "object") {
                      return acc + name + ": NameBind";
                    } else {
                      return acc + name + ": " + printTY(ty._0);
                    }
                  })).concat("}");
  }
}

function shift(d, t) {
  var walk = function (c, t) {
    if (typeof t !== "object") {
      if (t === "True") {
        return "True";
      } else {
        return "False";
      }
    }
    switch (t.TAG) {
      case "Var" :
          var n = t._1;
          var k = t._0;
          if (k >= c) {
            return {
                    TAG: "Var",
                    _0: k + d | 0,
                    _1: n + d | 0
                  };
          } else {
            return {
                    TAG: "Var",
                    _0: k,
                    _1: n + d | 0
                  };
          }
      case "Abs" :
          return {
                  TAG: "Abs",
                  _0: t._0,
                  _1: t._1,
                  _2: walk(c + 1 | 0, t._2)
                };
      case "App" :
          return {
                  TAG: "App",
                  _0: walk(c, t._0),
                  _1: walk(c, t._1)
                };
      case "If" :
          return {
                  TAG: "If",
                  _0: walk(c, t._0),
                  _1: walk(c, t._1),
                  _2: walk(c, t._2)
                };
      
    }
  };
  return walk(0, t);
}

function subst(j, s, t) {
  var walk = function (c, t) {
    if (typeof t !== "object") {
      if (t === "True") {
        return "True";
      } else {
        return "False";
      }
    }
    switch (t.TAG) {
      case "Var" :
          var k = t._0;
          if (k === (j + c | 0)) {
            return shift(c, s);
          } else {
            return {
                    TAG: "Var",
                    _0: k,
                    _1: t._1
                  };
          }
      case "Abs" :
          return {
                  TAG: "Abs",
                  _0: t._0,
                  _1: t._1,
                  _2: walk(c + 1 | 0, t._2)
                };
      case "App" :
          return {
                  TAG: "App",
                  _0: walk(c, t._0),
                  _1: walk(c, t._1)
                };
      case "If" :
          return {
                  TAG: "If",
                  _0: walk(c, t._0),
                  _1: walk(c, t._1),
                  _2: walk(c, t._2)
                };
      
    }
  };
  return walk(0, t);
}

function substTop(s, t) {
  return shift(-1, subst(0, shift(1, s), t));
}

function isVal(_ctx, t) {
  if (typeof t !== "object" || t.TAG === "Abs") {
    return true;
  } else {
    return false;
  }
}

var NoRuleApplies = /* @__PURE__ */Caml_exceptions.create("Typedlambda.NoRuleApplies");

function eval1(ctx, t) {
  if (typeof t !== "object") {
    throw {
          RE_EXN_ID: NoRuleApplies,
          _1: t,
          Error: new Error()
        };
  }
  switch (t.TAG) {
    case "App" :
        var v1 = t._0;
        if (typeof v1 === "object" && v1.TAG === "Abs") {
          var v2 = t._1;
          if (isVal(ctx, v2)) {
            return substTop(v2, v1._2);
          }
          
        }
        var t2 = t._1;
        if (isVal(ctx, v1)) {
          var t2$p = eval1(ctx, t2);
          return {
                  TAG: "App",
                  _0: v1,
                  _1: t2$p
                };
        }
        var t1$p = eval1(ctx, v1);
        return {
                TAG: "App",
                _0: t1$p,
                _1: t2
              };
        break;
    case "If" :
        var t1 = t._0;
        if (typeof t1 !== "object") {
          if (t1 === "True") {
            return t._1;
          } else {
            return t._2;
          }
        }
        var t1$p$1 = eval1(ctx, t1);
        return {
                TAG: "If",
                _0: t1$p$1,
                _1: t._1,
                _2: t._2
              };
    default:
      throw {
            RE_EXN_ID: NoRuleApplies,
            _1: t,
            Error: new Error()
          };
  }
}

function $$eval(ctx, _t) {
  while(true) {
    var t = _t;
    console.log(printContext(ctx), "|- Term: ", printTerm(ctx, t), "| Type: ", printTY(Core__Option.getOr(typeOf(ctx, t), {
                  TAG: "TyError",
                  _0: "error!"
                })));
    if (isVal(ctx, t)) {
      return t;
    }
    _t = eval1(ctx, t);
    continue ;
  };
}

$$eval(/* [] */0, {
      TAG: "App",
      _0: {
        TAG: "Abs",
        _0: "x",
        _1: {
          TAG: "TyArr",
          _0: "TyBool",
          _1: "TyBool"
        },
        _2: {
          TAG: "App",
          _0: {
            TAG: "Var",
            _0: 0,
            _1: 1
          },
          _1: "True"
        }
      },
      _1: {
        TAG: "Abs",
        _0: "y",
        _1: "TyBool",
        _2: {
          TAG: "Var",
          _0: 0,
          _1: 1
        }
      }
    });

console.log("");

$$eval(/* [] */0, {
      TAG: "App",
      _0: {
        TAG: "Abs",
        _0: "x",
        _1: {
          TAG: "TyArr",
          _0: "TyBool",
          _1: "TyBool"
        },
        _2: {
          TAG: "Abs",
          _0: "y",
          _1: "TyBool",
          _2: {
            TAG: "Var",
            _0: 1,
            _1: 2
          }
        }
      },
      _1: {
        TAG: "Abs",
        _0: "z",
        _1: "TyBool",
        _2: {
          TAG: "Var",
          _0: 0,
          _1: 1
        }
      }
    });

console.log("");

$$eval(/* [] */0, {
      TAG: "App",
      _0: {
        TAG: "Abs",
        _0: "x",
        _1: {
          TAG: "TyArr",
          _0: "TyBool",
          _1: "TyBool"
        },
        _2: {
          TAG: "Abs",
          _0: "y",
          _1: {
            TAG: "TyArr",
            _0: {
              TAG: "TyArr",
              _0: "TyBool",
              _1: "TyBool"
            },
            _1: "TyBool"
          },
          _2: {
            TAG: "App",
            _0: {
              TAG: "Var",
              _0: 0,
              _1: 2
            },
            _1: {
              TAG: "Var",
              _0: 1,
              _1: 2
            }
          }
        }
      },
      _1: {
        TAG: "Abs",
        _0: "z",
        _1: "TyBool",
        _2: {
          TAG: "Var",
          _0: 0,
          _1: 1
        }
      }
    });

export {
  addBinding ,
  getBinding ,
  getTypeFromContext ,
  typeOf ,
  pickFreshName ,
  indexToName ,
  printTY ,
  printTerm ,
  printContext ,
  shift ,
  subst ,
  substTop ,
  isVal ,
  NoRuleApplies ,
  eval1 ,
  $$eval ,
}
/*  Not a pure module */
