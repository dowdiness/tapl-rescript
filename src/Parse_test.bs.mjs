// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Parse from "./Parse.bs.mjs";

var Expect = {};

describe("Parse Module Tests", (function () {
        describe("Stream operations", (function () {
                test("should create and use stream", (function () {
                        var stream = Parse.Stream.make("hello");
                        expect(stream.source).toBe("hello");
                        expect(stream.location.contents).toBe(0);
                      }));
                test("should advance stream position", (function () {
                        var stream = Parse.Stream.make("abc");
                        var char1 = Parse.Stream.next(stream);
                        var char2 = Parse.Stream.next(stream);
                        expect(char1).toEqual("a");
                        expect(char2).toEqual("b");
                        expect(stream.location.contents).toBe(2);
                      }));
                test("should identify whitespace", (function () {
                        expect(Parse.Stream.isWhitespace(" ")).toBeTruthy();
                        expect(Parse.Stream.isWhitespace("\t")).toBeTruthy();
                        expect(Parse.Stream.isWhitespace("a")).toBeFalsy();
                      }));
              }));
        describe("Token operations", (function () {
                test("should convert tokens to strings", (function () {
                        expect(Parse.stringOfToken("LeftParen")).toBe("(");
                        expect(Parse.stringOfToken("RightParen")).toBe(")");
                        expect(Parse.stringOfToken("Lambda")).toBe("λ");
                        expect(Parse.stringOfToken("End")).toBe("End");
                        expect(Parse.stringOfToken({
                                    TAG: "Identifier",
                                    _0: "x"
                                  })).toBe("x");
                      }));
              }));
        describe("Character utilities", (function () {
                test("should identify alphabetic characters", (function () {
                        expect(Parse.isAlphabet("a")).toBeTruthy();
                        expect(Parse.isAlphabet("Z")).toBeTruthy();
                        expect(Parse.isAlphabet("1")).toBeFalsy();
                        expect(Parse.isAlphabet("(")).toBeFalsy();
                      }));
              }));
        describe("Lexer", (function () {
                test("should tokenize simple expressions", (function () {
                        var tokens = Parse.lexer("(λa)");
                        expect(tokens).toEqual({
                              hd: "LeftParen",
                              tl: {
                                hd: "Lambda",
                                tl: {
                                  hd: {
                                    TAG: "Identifier",
                                    _0: "a"
                                  },
                                  tl: {
                                    hd: "RightParen",
                                    tl: /* [] */0
                                  }
                                }
                              }
                            });
                      }));
                test("should handle empty input", (function () {
                        var tokens = Parse.lexer("");
                        expect(tokens).toEqual(/* [] */0);
                      }));
              }));
      }));

export {
  Expect ,
}
/*  Not a pure module */
