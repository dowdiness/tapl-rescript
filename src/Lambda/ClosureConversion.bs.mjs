// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ast from "./Ast.bs.mjs";
import * as Core__List from "@rescript/core/src/Core__List.bs.mjs";
import * as Belt_SetString from "rescript/lib/es6/belt_SetString.js";

function collectFVs(t) {
  switch (t.TAG) {
    case "Halt" :
        var x = t._0;
        switch (x.TAG) {
          case "AtomVar" :
              return Belt_SetString.fromArray([x._0]);
          case "AtomInt" :
          case "AtomGlob" :
              return ;
          
        }
    case "Fun" :
        var f = t._0;
        var fvE = collectFVs(t._2);
        var fvE$p = collectFVs(t._3);
        var bound = Belt_SetString.fromArray([f].concat(Core__List.toArray(t._1)));
        return Belt_SetString.union(Belt_SetString.diff(fvE, bound), Belt_SetString.diff(fvE$p, Belt_SetString.fromArray([f])));
    case "Join" :
        var p = t._1;
        var j = t._0;
        if (p !== undefined) {
          var fvE$1 = collectFVs(t._2);
          var fvE$p$1 = collectFVs(t._3);
          var bound$1 = Belt_SetString.fromArray([
                j,
                p
              ]);
          return Belt_SetString.union(Belt_SetString.diff(fvE$1, bound$1), Belt_SetString.diff(fvE$p$1, bound$1));
        }
        var fvE$2 = collectFVs(t._2);
        var fvE$p$2 = collectFVs(t._3);
        var bound$2 = Belt_SetString.fromArray([j]);
        return Belt_SetString.union(Belt_SetString.diff(fvE$2, bound$2), Belt_SetString.diff(fvE$p$2, bound$2));
    case "Jump" :
        var match = t._1;
        var j$1 = t._0;
        if (match === undefined) {
          return Belt_SetString.fromArray([j$1]);
        }
        switch (match.TAG) {
          case "AtomVar" :
              return Belt_SetString.fromArray([
                          j$1,
                          match._0
                        ]);
          case "AtomInt" :
          case "AtomGlob" :
              return Belt_SetString.fromArray([j$1]);
          
        }
    case "App" :
        var atomVars = Core__List.toArray(Core__List.map(t._2, (function (atom) {
                      switch (atom.TAG) {
                        case "AtomVar" :
                            return [atom._0];
                        case "AtomInt" :
                        case "AtomGlob" :
                            return [];
                        
                      }
                    }))).flat();
        var fvE$3 = collectFVs(t._3);
        return Belt_SetString.union(Belt_SetString.fromArray([t._1].concat(atomVars)), Belt_SetString.diff(fvE$3, Belt_SetString.fromArray([t._0])));
    case "Bop" :
        var atomVars$1 = Belt_SetString.fromArray([
                t._2,
                t._3
              ].flatMap(function (atom) {
                  switch (atom.TAG) {
                    case "AtomVar" :
                        return [atom._0];
                    case "AtomInt" :
                    case "AtomGlob" :
                        return [];
                    
                  }
                }));
        var fvE$4 = collectFVs(t._4);
        return Belt_SetString.union(atomVars$1, Belt_SetString.diff(fvE$4, Belt_SetString.fromArray([t._0])));
    case "If" :
        var x$1 = t._0;
        switch (x$1.TAG) {
          case "AtomVar" :
              return Belt_SetString.union(Belt_SetString.fromArray([x$1._0]), Belt_SetString.union(collectFVs(t._1), collectFVs(t._2)));
          case "AtomInt" :
          case "AtomGlob" :
              break;
          
        }
        return Belt_SetString.union(collectFVs(t._1), collectFVs(t._2));
    case "Tuple" :
        var atomVars$2 = Belt_SetString.fromArray(Core__List.toArray(Core__List.filterMap(t._1, (function (atom) {
                        switch (atom.TAG) {
                          case "AtomVar" :
                              return atom._0;
                          case "AtomInt" :
                          case "AtomGlob" :
                              return ;
                          
                        }
                      }))));
        var fvE$5 = collectFVs(t._2);
        return Belt_SetString.union(atomVars$2, Belt_SetString.diff(fvE$5, Belt_SetString.fromArray([t._0])));
    case "Proj" :
        var fvE$6 = collectFVs(t._3);
        return Belt_SetString.union(Belt_SetString.fromArray([t._1]), Belt_SetString.diff(fvE$6, Belt_SetString.fromArray([t._0])));
    
  }
}

function go(t) {
  switch (t.TAG) {
    case "Fun" :
        var e = t._2;
        var xs = t._1;
        var f = t._0;
        var env = Ast.fresh("env");
        var allFvs = collectFVs(e);
        var params = Belt_SetString.fromArray(Core__List.toArray(xs));
        var fvs = Core__List.fromArray(Belt_SetString.toArray(Belt_SetString.diff(allFvs, params)));
        var addProjections = function (body, fvList, index) {
          if (fvList) {
            return {
                    TAG: "Proj",
                    _0: fvList.hd,
                    _1: env,
                    _2: index,
                    _3: addProjections(body, fvList.tl, index + 1 | 0)
                  };
          } else {
            return body;
          }
        };
        var transformedBody = addProjections(go(e), fvs, 1);
        var vs = Core__List.map(fvs, (function (x) {
                return {
                        TAG: "AtomVar",
                        _0: x
                      };
              }));
        var closureTuple_1 = {
          hd: {
            TAG: "AtomGlob",
            _0: f
          },
          tl: vs
        };
        var closureTuple_2 = go(t._3);
        var closureTuple = {
          TAG: "Tuple",
          _0: f,
          _1: closureTuple_1,
          _2: closureTuple_2
        };
        return {
                TAG: "Fun",
                _0: f,
                _1: {
                  hd: env,
                  tl: xs
                },
                _2: transformedBody,
                _3: closureTuple
              };
    case "Join" :
        return {
                TAG: "Join",
                _0: t._0,
                _1: t._1,
                _2: go(t._2),
                _3: go(t._3)
              };
    case "Halt" :
    case "Jump" :
        return t;
    case "App" :
        var f$1 = t._1;
        var ptr = Ast.fresh("f");
        return {
                TAG: "Proj",
                _0: ptr,
                _1: f$1,
                _2: 0,
                _3: {
                  TAG: "App",
                  _0: t._0,
                  _1: ptr,
                  _2: {
                    hd: {
                      TAG: "AtomVar",
                      _0: f$1
                    },
                    tl: t._2
                  },
                  _3: go(t._3)
                }
              };
    case "Bop" :
        return {
                TAG: "Bop",
                _0: t._0,
                _1: t._1,
                _2: t._2,
                _3: t._3,
                _4: go(t._4)
              };
    case "If" :
        return {
                TAG: "If",
                _0: t._0,
                _1: go(t._1),
                _2: go(t._2)
              };
    case "Tuple" :
        return {
                TAG: "Tuple",
                _0: t._0,
                _1: t._1,
                _2: go(t._2)
              };
    case "Proj" :
        return {
                TAG: "Proj",
                _0: t._0,
                _1: t._1,
                _2: t._2,
                _3: go(t._3)
              };
    
  }
}

var convert = go;

export {
  collectFVs ,
  convert ,
}
/* Ast Not a pure module */
