// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ast from "./Ast.bs.mjs";
import * as Core__List from "@rescript/core/src/Core__List.bs.mjs";
import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";

function mkHalt(v) {
  return {
          TAG: "Halt",
          _0: v
        };
}

function letStar(f, k) {
  return f(k);
}

function go(e, k) {
  switch (e.TAG) {
    case "Int" :
        return k({
                    TAG: "AtomInt",
                    _0: e._0
                  });
    case "Var" :
        return k({
                    TAG: "AtomVar",
                    _0: e._0
                  });
    case "Lam" :
        var f = Ast.fresh("f");
        var t$p = go(e._1, (function (v) {
                return {
                        TAG: "Halt",
                        _0: v
                      };
              }));
        return {
                TAG: "Fun",
                _0: f,
                _1: {
                  hd: e._0,
                  tl: /* [] */0
                },
                _2: t$p,
                _3: k({
                      TAG: "AtomVar",
                      _0: f
                    })
              };
    case "App" :
        var x = e._1;
        var f$1 = e._0;
        var __x = function (fAtom) {
          return (function (__x) {
                      return go(x, __x);
                    })(function (xAtom) {
                      switch (fAtom.TAG) {
                        case "AtomVar" :
                            var r = Ast.fresh("r");
                            return {
                                    TAG: "App",
                                    _0: r,
                                    _1: fAtom._0,
                                    _2: {
                                      hd: xAtom,
                                      tl: /* [] */0
                                    },
                                    _3: k({
                                          TAG: "AtomVar",
                                          _0: r
                                        })
                                  };
                        case "AtomInt" :
                        case "AtomGlob" :
                            return PervasivesU.failwith("Must apply named value!");
                        
                      }
                    });
        };
        return go(f$1, __x);
    case "Bop" :
        var y = e._2;
        var x$1 = e._1;
        var op = e._0;
        var __x$1 = function (xAtom) {
          return (function (__x) {
                      return go(y, __x);
                    })(function (yAtom) {
                      var r = Ast.fresh("r");
                      return {
                              TAG: "Bop",
                              _0: r,
                              _1: op,
                              _2: xAtom,
                              _3: yAtom,
                              _4: k({
                                    TAG: "AtomVar",
                                    _0: r
                                  })
                            };
                    });
        };
        return go(x$1, __x$1);
    case "If" :
        var f$2 = e._2;
        var t = e._1;
        var e$1 = e._0;
        var __x$2 = function (eAtom) {
          var j = Ast.fresh("j");
          var p = Ast.fresh("p");
          var joinVar_1 = {
            TAG: "AtomVar",
            _0: p
          };
          var joinVar = {
            TAG: "Jump",
            _0: j,
            _1: joinVar_1
          };
          return {
                  TAG: "Join",
                  _0: j,
                  _1: p,
                  _2: k({
                        TAG: "AtomVar",
                        _0: p
                      }),
                  _3: {
                    TAG: "If",
                    _0: eAtom,
                    _1: go(t, (function (param) {
                            return joinVar;
                          })),
                    _2: go(f$2, (function (param) {
                            return joinVar;
                          }))
                  }
                };
        };
        return go(e$1, __x$2);
    
  }
}

function convert(e) {
  return go(e, mkHalt);
}

function printAtom(atom) {
  switch (atom.TAG) {
    case "AtomInt" :
        return atom._0.toString();
    case "AtomVar" :
        return atom._0;
    case "AtomGlob" :
        return "@" + atom._0;
    
  }
}

function printANF(t) {
  switch (t.TAG) {
    case "Halt" :
        return "halt " + printAtom(t._0);
    case "Fun" :
        var params = Core__List.toArray(t._1).join(", ");
        return "fun " + t._0 + "(" + params + ") =\n  " + printANF(t._2) + "\nin\n" + printANF(t._3);
    case "Join" :
        var p = t._1;
        var j = t._0;
        if (p !== undefined) {
          return "join " + j + "(" + p + ") =\n  " + printANF(t._2) + "\nin\n" + printANF(t._3);
        } else {
          return "join " + j + " =\n  " + printANF(t._2) + "\nin\n" + printANF(t._3);
        }
    case "Jump" :
        var atom = t._1;
        var j$1 = t._0;
        if (atom !== undefined) {
          return "jump " + j$1 + "(" + printAtom(atom) + ")";
        } else {
          return "jump " + j$1;
        }
    case "App" :
        var args = Core__List.toArray(Core__List.map(t._2, printAtom)).join(", ");
        return "let " + t._0 + " = " + t._1 + "(" + args + ") in\n" + printANF(t._3);
    case "Bop" :
        var r = t._0;
        if (t._1 === "Plus") {
          return "let " + r + " = " + printAtom(t._2) + " + " + printAtom(t._3) + " in\n" + printANF(t._4);
        } else {
          return "let " + r + " = " + printAtom(t._2) + " - " + printAtom(t._3) + " in\n" + printANF(t._4);
        }
    case "If" :
        return "if " + printAtom(t._0) + " then\n  " + printANF(t._1) + "\nelse\n  " + printANF(t._2);
    case "Tuple" :
        var values = Core__List.toArray(Core__List.map(t._1, printAtom)).join(", ");
        return "let " + t._0 + " = (" + values + ") in\n" + printANF(t._2);
    case "Proj" :
        return "let " + t._0 + " = " + t._1 + "." + t._2.toString() + " in\n" + printANF(t._3);
    
  }
}

export {
  mkHalt ,
  letStar ,
  convert ,
  printAtom ,
  printANF ,
}
/* Ast Not a pure module */
