// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var NoRuleApplies = /* @__PURE__ */Caml_exceptions.create("Ast.NoRuleApplies");

var c = {
  contents: -1
};

function fresh(str) {
  c.contents = c.contents + 1 | 0;
  return str + c.contents.toString();
}

function go(env) {
  return function (t) {
    switch (t.TAG) {
      case "Int" :
          return {
                  TAG: "Int",
                  _0: t._0
                };
      case "Var" :
          var name$p = Belt_MapString.get(env, t._0);
          if (name$p !== undefined) {
            return {
                    TAG: "Var",
                    _0: name$p
                  };
          }
          throw {
                RE_EXN_ID: NoRuleApplies,
                _1: t,
                Error: new Error()
              };
      case "Lam" :
          var name = t._0;
          var name$p$1 = fresh(name);
          var env$p = Belt_MapString.set(env, name, name$p$1);
          return {
                  TAG: "Lam",
                  _0: name$p$1,
                  _1: go(env$p)(t._1)
                };
      case "App" :
          return {
                  TAG: "App",
                  _0: go(env)(t._0),
                  _1: go(env)(t._1)
                };
      case "Bop" :
          return {
                  TAG: "Bop",
                  _0: t._0,
                  _1: go(env)(t._1),
                  _2: go(env)(t._2)
                };
      case "If" :
          return {
                  TAG: "If",
                  _0: go(env)(t._0),
                  _1: go(env)(t._1),
                  _2: go(env)(t._2)
                };
      
    }
  };
}

var rename = go(undefined);

function printLam(t) {
  switch (t.TAG) {
    case "Int" :
        return t._0.toString();
    case "Var" :
        return t._0;
    case "Lam" :
        return "(Î»" + t._0 + ". " + printLam(t._1) + ")";
    case "App" :
        return "(" + printLam(t._0) + " " + printLam(t._1) + ")";
    case "Bop" :
        if (t._0 === "Plus") {
          return "(" + printLam(t._1) + " + " + printLam(t._2) + ")";
        } else {
          return "(" + printLam(t._1) + " - " + printLam(t._2) + ")";
        }
    case "If" :
        return "if " + printLam(t._0) + " then " + printLam(t._1) + " else " + printLam(t._2);
    
  }
}

export {
  NoRuleApplies ,
  c ,
  fresh ,
  rename ,
  printLam ,
}
/* rename Not a pure module */
